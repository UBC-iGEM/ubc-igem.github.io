---
export type CarouselImg = {
  img: string;
  caption: string;
  separateAltText: string | null;
}

type Props = {
  imgs: CarouselImg[];
  imgPrefix: string;
};

const props = Astro.props;
---

<div class="carousel">
  {props.imgs.map((carouselImg, index) => (
    <img
      src={`${props.imgPrefix}${carouselImg.img}`}
      alt={carouselImg.separateAltText ?? carouselImg.caption}
      class={index === 0 ? "active" : null}
    />
    <div class="caption">
      <p>{carouselImg.caption}</p>
    </div>
  ))}
  <div class="divider" />
  <div class="carousel-buttons">
    <button class="prev-button">
      <img src="static/icons/carousel-prev-button.svg" />
    </button>
    <button class="next-button">
      <img src="static/icons/carousel-next-button.svg" />
    </button>
  </div>
</div>

<script>
  const handleCarouselButtonClick = (
    event: Event,
    findNextActiveImage: (carousel: Element, currentActive: Element) => Element
  ) => {
    const cause_button = event.target as HTMLButtonElement
    const carousel = cause_button.closest(".carousel")!

    const currentActive = carousel.querySelector(".active")!
    const nextActive = findNextActiveImage(carousel, currentActive)

    currentActive.classList.remove("active")
    nextActive.classList.add("active")
    nextActive.scrollIntoView({block: "nearest", inline: "nearest"})
  }

  const nextButtonHandler = (event: Event) => handleCarouselButtonClick(
    event,
    (carousel, _) => carousel.querySelector(
      ".active + .caption + img"
    ) ?? carousel.firstElementChild!
  )

  const prevButtonHandler = (event: Event) => handleCarouselButtonClick(
    event,
    (carousel, currentActive) => currentActive.previousElementSibling?.previousElementSibling
      ?? carousel.querySelector("img:last-of-type")!
  )

  document.querySelectorAll(".next-button").forEach(x => x.addEventListener("click", nextButtonHandler))
  document.querySelectorAll(".prev-button").forEach(x => x.addEventListener("click", prevButtonHandler))
</script>

<style>
  :root {
    --carousel-img-height: 400px;
    --carousel-img-vertical-margin: 30px;
    --carousel-border: var(--border-width) solid var(--border-color);
    --carousel-side-margin: 12vw;

    --carousel-button-size: 48px;
    --carousel-button-padding: 18px;
    --allowed-caption-width: calc(
      100vw
      - var(--carousel-side-margin) * 2
      - var(--carousel-button-size) * 2
      - var(--carousel-button-padding) * 3
      - 20px
    );
  }

  @media (max-width: 710px) {
    :root {
      --carousel-side-margin: 0;
      /* for some reason the definition of this var above completely breaks
       * when --carousel-side-margin is 0, and needs to be redefined without it
       * here */
      --allowed-caption-width: calc(
        100vw
        - var(--carousel-button-size) * 2
        - var(--carousel-button-padding) * 3
        - 20px
      );
    }
  }

  .carousel {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 1fr auto;
    grid-template-rows: var(--carousel-img-height) 2px 1fr;
    overflow-x: auto;
    scrollbar-color: gray transparent;
    border-top: var(--carousel-border);
    border-bottom: var(--carousel-border);

    margin: 56px var(--carousel-side-margin);
  }

  .carousel > img {
    grid-row: 1;
    height: calc(var(--carousel-img-height) - var(--carousel-img-vertical-margin) * 2);
    border: var(--carousel-border);
    border-radius: var(--border-radius-sm);
    margin: var(--carousel-img-vertical-margin) 20px;
  }

  .caption {
    display: none;
  }

  .active {
    box-shadow: 7px 7px 7px rgba(0, 0, 0, 0.3);
  }

  .active + .caption {
    display: grid;
    grid-row: 3;
    grid-column: 1;
    position: sticky;
    left: 10px;
    min-width: 0;

    p {
      width: var(--allowed-caption-width);
    }
  }

  .carousel-buttons {
    grid-row: 3;

    display: flex;
    flex-direction: row;
    justify-self: end;
    position: sticky;
    gap: var(--carousel-button-padding);
    right: var(--carousel-button-padding);

    margin: 13px 0px;

    button {
      height: var(--carousel-button-size);
      width: var(--carousel-button-size);
      border: var(--carousel-border);
      border-radius: var(--border-radius-sm);
      background-color: transparent;
    }
  }

  .divider {
    grid-row: 2;
    /* this looks cursed but it's actually impossible to
     * force a grid item to span to the last column in an
     * implicit grid: https://stackoverflow.com/a/44053668/17879981
     */
    grid-column: 1 / 99;
    border-top: var(--carousel-border);
  }
</style>
