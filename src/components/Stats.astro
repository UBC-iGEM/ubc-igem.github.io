---
const stats = [
  {
    icon: "image",
    imageSrc: "/images/landing/stat-icons/cake.png",
    title: "15 Years of Competing",
    details: "2009-2019, 2021-2025",
    color: "#6B46C1",
  },
  {
    icon: "image",
    imageSrc: "/images/landing/stat-icons/prizes.png",
    title: "7 Special Prize Nominations",
    details: "",
    color: "#F6AD55",
  },
  {
    icon: "image",
    imageSrc: "/images/landing/stat-icons/medal.png",
    title: "10 Gold Medals",
    details: "2024, 2022, 2021, 2019, 2016,\n 2015, 2013, 2012, 2011, 2010",
    color: "#F6AD55",
  },
  {
    icon: "image",
    imageSrc: "/images/landing/stat-icons/trophy.png",
    title: "3 Special Prize Wins",
    details:
      "Best Hardware 2024\nBest Sustainable Development Impact 2024\nBest Model 2013",
    color: "#6B46C1",
  },
];
---

<div class="stats-grid">
  {
    stats.map((stat) => (
      <div class="stat-card">
        <div class="stat-content">
          <div
            class="stat-icon"
            style={stat.icon !== "image" ? `color: ${stat.color};` : ""}
          >
            {stat.icon === "cake" && (
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24 12C26.2 12 28 10.2 28 8C28 7.24 27.8 6.54 27.42 5.94L24 0L20.58 5.94C20.2 6.54 20 7.24 20 8C20 10.2 21.8 12 24 12ZM36 18H26V14H22V18H12C8.68 18 6 20.68 6 24V42C6 43.1 6.9 44 8 44H40C41.1 44 42 43.1 42 42V24C42 20.68 39.32 18 36 18Z"
                  fill="currentColor"
                />
              </svg>
            )}
            {stat.icon === "image" && (
              <img
                src={stat.imageSrc}
                alt="Prize icon"
                width="64"
                height="64"
              />
            )}
            {stat.icon === "star" && (
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24 4L30.18 16.52L44 18.54L34 28.14L36.36 42.02L24 35.54L11.64 42.02L14 28.14L4 18.54L17.82 16.52L24 4Z"
                  fill="currentColor"
                />
              </svg>
            )}
            {stat.icon === "medal" && (
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24 4C16.26 4 10 10.26 10 18C10 28.5 24 44 24 44S38 28.5 38 18C38 10.26 31.74 4 24 4ZM14 18C14 12.48 18.48 8 24 8S34 12.48 34 18C34 23.76 28.24 32.38 24 37.76C19.76 32.38 14 23.7 14 18Z"
                  fill="currentColor"
                />
              </svg>
            )}
            {stat.icon === "trophy" && (
              <svg
                width="48"
                height="48"
                viewBox="0 0 48 48"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M38 10H34V6H14V10H10C7.8 10 6 11.8 6 14V16C6 21.1 9.84 25.26 14.78 25.88C16.04 28.88 18.74 31.14 22 31.8V38H14V42H34V38H26V31.8C29.26 31.14 31.96 28.88 33.22 25.88C38.16 25.26 42 21.1 42 16V14C42 11.8 40.2 10 38 10ZM10 16V14H14V21.64C11.68 20.8 10 18.6 10 16ZM38 16C38 18.6 36.32 20.8 34 21.64V14H38V16Z"
                  fill="currentColor"
                />
              </svg>
            )}
          </div>
          <div class="stat-info">
            <div class="title-row">
              <h3>{stat.title}</h3>
              <div class="toggle-arrow">â–¶</div>
            </div>
            <div class="stat-details">
              {stat.details.split("\n").map((detail) => (
                <p>{detail}</p>
              ))}
            </div>
          </div>
        </div>
      </div>
    ))
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Only apply click handlers on mobile devices
    const isMobile = window.innerWidth <= 768;
    const cards = document.querySelectorAll(".stat-card");

    if (isMobile) {
      cards.forEach((card) => {
        card.addEventListener("click", () => {
          if (card.classList.contains("active")) {
            card.classList.remove("active");
          } else {
            // Close all other cards first
            document
              .querySelectorAll(".stat-card.active")
              .forEach((activeCard) => {
                activeCard.classList.remove("active");
              });
            // Open this card
            card.classList.add("active");
          }
        });
      });
    }

    // Handle window resize
    window.addEventListener("resize", () => {
      const isNowMobile = window.innerWidth <= 768;

      // Remove all active classes when switching between mobile and desktop
      if (isNowMobile !== isMobile) {
        document.querySelectorAll(".stat-card.active").forEach((card) => {
          card.classList.remove("active");
        });
      }
    });
  });
</script>

<style>
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 24px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    font-family: "Poppins", sans-serif;
  }

  .stat-card {
    background: #fff;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 40px;
    box-shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.1);
    height: 200px; /* Fixed height for both states */
    position: relative;
    overflow: hidden;
    font-family: "Poppins", sans-serif;
  }

  /* Desktop hover effects */
  @media (min-width: 769px) {
    .stat-card:hover .stat-info h3 {
      transform: translateY(-10px);
    }

    .stat-card:hover .title-row {
      transform: translateY(-10px);
      margin-bottom: 0;
    }

    .stat-card:hover .stat-details {
      opacity: 1;
    }

    .stat-card {
      cursor: default; /* Remove pointer cursor on desktop */
    }
  }

  .stat-content {
    display: flex;
    gap: 24px;
    align-items: center; /* Center items vertically */
    height: 100%;
  }

  .stat-icon {
    flex-shrink: 0;
    width: 64px; /* Bigger icon */
    height: 64px; /* Bigger icon */
  }

  .stat-info {
    flex-grow: 1;
    width: calc(100% - 88px); /* Adjusted for larger icon */
    display: flex;
    flex-direction: column;
    position: relative;
    justify-content: center; /* Center text vertically */
    height: 100%;
  }

  .title-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: transform 0.3s ease;
    height: auto;
    line-height: 1.2;
    margin-bottom: 0;
  }

  .toggle-arrow {
    display: none; /* Hide in web view */
    color: #6b46c1;
    font-size: 12px;
    transition: transform 0.3s ease;
  }

  .stat-info h3 {
    font-size: 24px;
    font-weight: 600;
    color: #1a202c;
    margin: 0;
    transition: transform 0.3s ease;
    font-family: "Poppins", sans-serif;
  }

  .stat-details {
    margin-top: 12px;
    font-size: 16px;
    color: #4a5568;
    opacity: 0;
    transition: opacity 0.3s ease;
    position: absolute;
    top: 40px; /* Position closer to title */
    left: 0;
    width: 100%;
    font-family: "Poppins", sans-serif;
  }

  /* Mobile active class (for click) */
  .stat-card.active .stat-info h3 {
    transform: translateY(-10px); /* Reduced movement */
  }

  .stat-card.active .title-row {
    transform: translateY(-10px); /* Reduced movement */
    margin-bottom: 0;
  }

  .stat-card.active .stat-details {
    opacity: 1;
  }

  .stat-card.active .toggle-arrow {
    transform: rotate(90deg);
  }

  .stat-details p {
    margin: 4px 0;
    line-height: 1.5;
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
      max-width: 400px;
      margin: 0 auto;
      padding: 0 16px;
      gap: 16px;
    }

    .stat-card {
      padding: 16px;
      width: 100%;
      box-sizing: border-box;
      height: 120px; /* Slightly smaller for mobile, but still fixed */
      cursor: pointer; /* Show pointer cursor on mobile */
    }

    .stat-content {
      gap: 16px;
    }

    .stat-icon {
      width: 52px; /* Bigger icon but adjusted for mobile */
      height: 52px;
    }

    .stat-info {
      width: calc(100% - 68px); /* Adjusted for larger icon */
    }

    .toggle-arrow {
      display: block; /* Show only in mobile view */
    }

    .stat-details {
      top: 35px; /* Position closer to title on mobile */
    }

    .stat-card.active .stat-info h3,
    .stat-card.active .title-row {
      transform: translateY(-10px); /* Smaller movement on mobile */
    }
  }
</style>
