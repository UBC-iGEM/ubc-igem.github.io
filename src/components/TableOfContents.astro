---
interface Props {
  entries: {
    title: string;
    anchor: string;
  }[];
}

const { entries } = Astro.props
---

<div class="table-of-contents">
  {entries.map(entry => (
    <a href={`#${entry.anchor}`} data-entry={entry.anchor}>
      <p>{entry.title}</p>
    </a>
  ))}
</div>

<script is:inline>
  window.addEventListener('DOMContentLoaded', () => {
    const pageEntries = document.querySelectorAll('section[id]')
    const tocEntries = document.querySelectorAll('[data-entry]')

    const isSmallerScreen = window.matchMedia('(max-width: 1000px)')

    const observerOptions = {
      root: null,
      rootMargin: '-50px',
      threshold: isSmallerScreen ? 0.3 : 0.7
    }

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          tocEntries.forEach(tocEntry => tocEntry.classList.toggle('selected', tocEntry.dataset.entry === entry.target.id))
        }
      })
    }, observerOptions)

    pageEntries.forEach(section => observer.observe(section))
  })
</script>

<style>
  .table-of-contents {
    display: flex;
    flex-direction: column;
    position: fixed;
    max-width: 125px;
    top: calc(var(--navigation-height) + 10px);
    right: 10px;
    padding: 1.5rem 1rem;
    gap: 15px;
    font-family: 'Open Sans', sans-serif;
    font-size: 0.8rem;
    background-color: var(--background-color);
    border-radius: var(--border-radius-md);
    box-shadow: 1px 1px 5px 1px rgba(0, 0, 0, 0.25);
  }

  .table-of-contents p {
    margin: 0;
  }

  .table-of-contents .selected {
    color: var(--color-tertiary-green);
    font-weight: bold;
  }

  @media (max-width: 800px) {
    .table-of-contents {
      display: none;
    }
  }
</style>
